/**
 * This file was generated with Enamel : http://gregoiresage.github.io/enamel
 */

#ifndef ENAMEL_H
#define ENAMEL_H

#include <pebble.h>

{% macro item_header(item) %}
{% if 'messageKey' in item and 'enamel-ignore' not in item %}
{% if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif %}
// -----------------------------------------------------
// Getter for '{{ item|getid }}'
{% if item['type'] == 'select' or item['type'] == 'radiogroup' %}
{% if item['options'][0]['value'] is string %}
const char* enamel_get_{{ item|getid|cvarname }}();
{% else %}
typedef enum {
{% for option in item['options']: %}
	{{ item|getid|cvarname|upper }}_{{ option['label']|cvarname|upper }} = {{ option['value'] }},
{% endfor %}
} {{ item|getid|cvarname|upper }}Value;
{{ item|getid|cvarname|upper }}Value enamel_get_{{ item|getid|cvarname }}();
{% endif %}
{% elif item['type'] == 'toggle' %}
bool enamel_get_{{ item|getid|cvarname }}();
{% elif item['type'] == 'input' %}
const char* enamel_get_{{ item|getid|cvarname }}();
{% elif item['type'] == 'color' %}
GColor enamel_get_{{ item|getid|cvarname }}();
{% elif item['type'] == 'checkboxgroup' %}
typedef enum {
{% for option in item['options']: %}
	{{ item|getid|cvarname|upper }}_{{ option|cvarname|upper }} = {{ loop.index0 }},
{% endfor %}
} {{ item|getid|cvarname|upper }}Value;
bool enamel_get_{{ item|getid|cvarname }}({{ item|getid|cvarname|upper }}Value index);
{% elif item['type'] == 'slider' %}
{% if 'step' in item and '.' in item['step']|string %}
#define {{ item|getid|cvarname|upper }}_PRECISION {{ 10**((item['step'] - item['step']|round(0, 'floor'))|string|length - 2) }}
{% else %}
#define {{ item|getid|cvarname|upper }}_PRECISION 1
{% endif %}
int32_t enamel_get_{{ item|getid|cvarname }}();
{% endif %}
{% if 'capabilities' in item %}
#endif
{% endif %}
// -----------------------------------------------------

{% endif %}
{% endmacro -%}

{% for item in config %}
{% if item['type'] == 'section' %}
{% if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif %}
{% for item in item['items'] %}
{{ item_header(item) }}
{%- endfor %}
{% if 'capabilities' in item %}
#endif
{% endif %}
{% else %}
{{ item_header(item) }}
{%- endif %}
{% endfor -%}

void enamel_init();

void enamel_deinit();

typedef void(EnamelSettingsReceivedCallback)(void);

void enamel_register_settings_received(EnamelSettingsReceivedCallback *callback);

#endif