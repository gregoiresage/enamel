/**
 * This file was generated with Enamel : http://gregoiresage.github.io/enamel
 */

#include <pebble.h>
#include <pebble-events/pebble-events.h>
#include "enamel.h"

#ifndef ENAMEL_MAX_STRING_LENGTH
#define ENAMEL_MAX_STRING_LENGTH 30
#endif

#define ENAMEL_PKEY 100000000
#define ENAMEL_VALUE_PKEY ENAMEL_PKEY + 10

static EventHandle s_event_handle;
static EnamelSettingsReceivedCallback *s_settings_received_callback; 

static bool s_config_changed;

{% macro item_accessors_code(item) %}
{% if 'messageKey' in item and 'enamel-ignore' not in item %}
{% if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif %}
// -----------------------------------------------------
// Getter for '{{ item|getid }}'
{% if item['type'] == 'toggle' %}
static bool s_{{ item|getid|cvarname }};
bool enamel_get_{{ item|getid|cvarname }}(){
	return s_{{ item|getid|cvarname }};
}
static void prv_set_{{ item|getid|cvarname }}(bool value){
	s_{{ item|getid|cvarname }} = value;
}
{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
{% if item['options'][0]['value'] is string %}
static uint16_t s_{{ item|getid|cvarname }};
static const char* s_{{ item|getid|cvarname }}_values[] = {
{%- for option in item['options'] -%}
	"{{ option['value'] }}",
{%- endfor -%}
};
const char* enamel_get_{{ item|getid|cvarname }}(){
	return s_{{ item|getid|cvarname }}_values[s_{{ item|getid|cvarname }}];
}
static void prv_set_{{ item|getid|cvarname }}(char* value){
	for(uint16_t i=0; i<{{ item['options']|length }}; i++){
		if(strcmp(value, s_{{ item|getid|cvarname }}_values[i]) == 0){
			s_{{ item|getid|cvarname }} = i;
			return;
		}
	}
	s_{{ item|getid|cvarname }} = 0;
}
{% else %}
{{ item|getid|cvarname|upper }}Value s_{{ item|getid|cvarname }};
{{ item|getid|cvarname|upper }}Value enamel_get_{{ item|getid|cvarname }}(){
	return s_{{ item|getid|cvarname }};
}
static void prv_set_{{ item|getid|cvarname }}({{ item|getid|cvarname|upper }}Value value){
	s_{{ item|getid|cvarname }} = value;
}
{% endif %}
{% elif item['type'] == 'input' %}
static char* s_{{ item|getid|cvarname }} = NULL; 
const char* enamel_get_{{ item|getid|cvarname }}(){
	return s_{{ item|getid|cvarname }};
}
static void prv_set_{{ item|getid|cvarname }}(char* value){
	if(s_{{ item|getid|cvarname }}) free( s_{{ item|getid|cvarname }});
	uint32_t size = strlen(value);
	s_{{ item|getid|cvarname }} = malloc(size + 1);
	s_{{ item|getid|cvarname }}[size] = 0;
	strncpy(s_{{ item|getid|cvarname }}, value, size);
}
{% elif item['type'] == 'color' %}
static GColor s_{{ item|getid|cvarname }};
GColor enamel_get_{{ item|getid|cvarname }}(){
	return s_{{ item|getid|cvarname }};
}
static void prv_set_{{ item|getid|cvarname }}(uint8_t value){
	s_{{ item|getid|cvarname }}.argb = value;
}
{% elif item['type'] == 'slider' %}
static int32_t s_{{ item|getid|cvarname }};
int32_t enamel_get_{{ item|getid|cvarname }}(){
	return s_{{ item|getid|cvarname }};
}
static void prv_set_{{ item|getid|cvarname }}(int32_t value){
	s_{{ item|getid|cvarname }} = value;
}
{% elif item['type'] == 'checkboxgroup' %}
static bool s_{{ item|getid|cvarname }}[{{item['options']|length}}];
bool enamel_get_{{ item|getid|cvarname }}({{ item|getid|cvarname|upper }}Value index_){
	return s_{{ item|getid|cvarname }}[index_];
}
static void prv_set_{{ item|getid|cvarname }}({{ item|getid|cvarname|upper }}Value index_, bool data_){
	s_{{ item|getid|cvarname }}[index_] = data_;
}
{% endif %}
// -----------------------------------------------------
{% if 'capabilities' in item %}
#endif
{% endif %}

{% endif %}
{%- endmacro -%}

{% for item in config -%}
{% if item['type'] == 'section' %}
{% if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif %}
{% for item in item['items'] %}
{{ item_accessors_code(item) }}
{%- endfor %}
{% if 'capabilities' in item %}
#endif
{% endif %}
{% else %}
{{ item_accessors_code(item) }}
{%- endif %}
{% endfor %}

{% macro item_in_received_handler(item) %}
{% if 'messageKey' in item and 'enamel-ignore' not in item %}
{% if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif %}
	{% if item['type'] == 'checkboxgroup' %}
	{% for option in item['options'] %}
	tuple = dict_find(iter,  {{ item|getmessagekey }} + {{ loop.index0 }});
	changed = changed || (tuple != NULL);
	tuple ? prv_set_{{ item|getid|cvarname }}({{ item|getid|cvarname|upper }}_{{ option|cvarname|upper }}, tuple->value->int32 == 1) : false;
	{% endfor %}
	{% else %}
	tuple = dict_find(iter, {{ item|getmessagekey }});
	changed = changed || tuple;
	{% if item['type'] == 'input' %}
	tuple ? prv_set_{{ item|getid|cvarname }}(tuple->value->cstring) : false;
	{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
	{% if item['options'][0]['value'] is string %}
	tuple ? prv_set_{{ item|getid|cvarname }}(tuple->value->cstring) : false;
	{% else %}
	tuple ? prv_set_{{ item|getid|cvarname }}(atoi(tuple->value->cstring)) : false;
	{% endif %}
	{% elif item['type'] == 'color' %}
	tuple ? prv_set_{{ item|getid|cvarname }}(GColorFromHEX(tuple->value->int32).argb) : false;
	{% elif item['type'] == 'toggle' %}
	tuple ? prv_set_{{ item|getid|cvarname }}(tuple->value->int32) : false;
	{% elif item['type'] == 'slider' %}
	tuple ? prv_set_{{ item|getid|cvarname }}(tuple->value->int32) : false;
	{% endif %}
	{% endif %}
{% if 'capabilities' in item %}
#endif
{% endif %}
{% endif %}
{% endmacro -%}

{% macro item_init(item) %}
{% if 'messageKey' in item and 'enamel-ignore' not in item %}
{% if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif %}
	pkey = prv_get_pkey(hashes, key_size, {{item|hashkey}});
	if (pkey && persist_exists(pkey)) {
		{% if item['type'] == 'input' %}
		char tmp[ENAMEL_MAX_STRING_LENGTH];
		memset(tmp, 0, ENAMEL_MAX_STRING_LENGTH);
		persist_read_string(pkey, tmp, ENAMEL_MAX_STRING_LENGTH);
		prv_set_{{ item|getid|cvarname }}(tmp);
		{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
		{% if item['options'][0]['value'] is string %}
		s_{{ item|getid|cvarname }} = (uint16_t)persist_read_int(pkey);
		{% else %}
		prv_set_{{ item|getid|cvarname }}(persist_read_int(pkey));
		{% endif %}
		{% elif item['type'] == 'color' %}
		prv_set_{{ item|getid|cvarname }}(persist_read_int(pkey));
		{% elif item['type'] == 'slider' %}
		prv_set_{{ item|getid|cvarname }}(persist_read_int(pkey));
		{% elif item['type'] == 'toggle' %}
		prv_set_{{ item|getid|cvarname }}(persist_read_bool(pkey));
		{% elif item['type'] == 'checkboxgroup' %}
		persist_read_data(pkey, s_{{ item|getid|cvarname }}, {{ item['options']|length }});
		{% endif %}
	}
	{% if 'defaultValue' in item %}
	else {
		{% if item['type'] == 'input' %}
		prv_set_{{ item|getid|cvarname }}("{{item['defaultValue']}}");
		{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
		{% if item['options'][0]['value'] is string %}
		prv_set_{{ item|getid|cvarname }}("{{item['defaultValue']}}");
		{% else %}
		prv_set_{{ item|getid|cvarname }}({{item['defaultValue']}});
		{% endif %}
		{% elif item['type'] == 'color' %}
		{% if item['defaultValue'] is string %}
		prv_set_{{ item|getid|cvarname }}(GColorFromHEX(0x{{item['defaultValue']}}).argb);
		{% else %}
		prv_set_{{ item|getid|cvarname }}(GColorFromHEX({{item['defaultValue']}}).argb);
		{% endif %}
		{% elif item['type'] == 'slider' %}
		{% if 'step' in item and '.' in item['step']|string %}
		prv_set_{{ item|getid|cvarname }}({{ (item['defaultValue'] * 10**((item['step'] - item['step']|round(0, 'floor'))|string|length - 2))|int }});
		{% else %}
		prv_set_{{ item|getid|cvarname }}({{item['defaultValue']|lower}});
		{% endif %}
		{% elif item['type'] == 'toggle' %}
		prv_set_{{ item|getid|cvarname }}({{item['defaultValue']|lower}});
		{% elif item['type'] == 'checkboxgroup' %}
		{% for val in item['defaultValue'] %}
		prv_set_{{ item|getid|cvarname }}({{ loop.index0 }}, {{ val|lower }});
		{% endfor %}
		{% endif %}
	}
	{% endif %}
{% if 'capabilities' in item %}
#endif
{% endif %}
{% endif %}
{% endmacro -%}

{% macro item_dict_size(item) %}
{% if 'messageKey' in item and 'enamel-ignore' not in item %}
{% if item['type'] == 'input' %}
+ 7 + ENAMEL_MAX_STRING_LENGTH
{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
+ 7 + {{ item|maxdictsize }}
{% elif item['type'] == 'checkboxgroup' %}
+ 7 + {{ item['options']|length }}
{% elif item['type'] == 'color' or item['type'] == 'toggle' or item['type'] == 'slider' %}
+ 7 + 4
{% endif %}
{% endif %}
{% endmacro -%}

static uint16_t prv_get_inbound_size() {
	return 1
		{% for item in config %}
		{% if item['type'] == 'section' %}
{%- if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif -%}
		{% for item in item['items'] %}
{%- if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif -%}
			{{ item_dict_size(item) }}
{%- if 'capabilities' in item %}
#endif
{% endif -%}
		{%- endfor %}
{%- if 'capabilities' in item %}
#endif
{% endif -%}
		{% else %}
{%- if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif -%}
			{{ item_dict_size(item) }}
{%- if 'capabilities' in item %}
#endif
{% endif -%}
		{%- endif %}
		{% endfor %};
}

static void inbox_received_handle(DictionaryIterator *iter, void *context) {
	Tuple *tuple = NULL;
	bool changed = false;
{% for item in config %}
{% if item['type'] == 'section' %}
{% for item in item['items'] %}
{{ item_in_received_handler(item) }}
{%- endfor %}
{% else %}
{{ item_in_received_handler(item) }}
{%- endif %}
{% endfor %}
	s_config_changed |= changed;
	if(changed && s_settings_received_callback){
		s_settings_received_callback();
	}
}

static uint16_t prv_save_generic_data(uint32_t startkey, const void *data, uint16_t size){
	uint16_t offset = 0;
	uint16_t total_w_bytes = 0;
	uint16_t w_bytes = 0;
	while(offset < size){
		w_bytes = persist_write_data(startkey + offset / PERSIST_DATA_MAX_LENGTH, data + offset, PERSIST_DATA_MAX_LENGTH);
		total_w_bytes += w_bytes;
		offset += PERSIST_DATA_MAX_LENGTH;
	}
	return total_w_bytes; 
}

static uint16_t prv_load_generic_data(uint32_t startkey, void *data, uint16_t size){
	uint16_t offset = 0;
	uint16_t total_r_bytes = 0;
	uint16_t expected_r_bytes = 0;
	uint16_t r_bytes = 0;
	while(offset < size){
		if(size - offset > PERSIST_DATA_MAX_LENGTH){
			expected_r_bytes = PERSIST_DATA_MAX_LENGTH;
		}
		else {
			expected_r_bytes = size - offset;
		}
		r_bytes = persist_read_data(startkey + offset / PERSIST_DATA_MAX_LENGTH, data + offset, expected_r_bytes);
		total_r_bytes += r_bytes;
		if(r_bytes != expected_r_bytes){
			break; 
		}
		offset += PERSIST_DATA_MAX_LENGTH;
	}
	return total_r_bytes;
}

static uint32_t prv_get_pkey(uint32_t *hashes_, uint16_t size_, uint32_t hash_){
	for(uint16_t i=0; i<size_; i++){
		if(hashes_[i] == hash_)
			return ENAMEL_VALUE_PKEY + i;
	}
	return 0;
}


void enamel_init(){
	uint16_t key_size = 0;
	uint32_t *hashes = NULL;
	if(persist_exists(ENAMEL_PKEY)) 
	{
		key_size = persist_read_int(ENAMEL_PKEY);
		hashes = malloc(key_size * sizeof(uint32_t));
		if(hashes) {
			prv_load_generic_data(ENAMEL_PKEY + 1, hashes, key_size * sizeof(uint32_t));
		}
		else {
			key_size = 0;
		}
	}
	
	uint32_t pkey = 0;
{% for item in config %}
{% if item['type'] == 'section' %}
{% for item in item['items'] %}
{{ item_init(item) }}
{%- endfor %}
{% else %}
{{ item_init(item) }}
{%- endif %}
{% endfor %}

	s_config_changed = false;
	s_settings_received_callback = NULL;
	s_event_handle = events_app_message_register_inbox_received(inbox_received_handle, NULL);
	events_app_message_request_inbox_size(prv_get_inbound_size());

	if(hashes){
		free(hashes);
	}
}

{% macro item_deinit(item) %}
{% if 'messageKey' in item and 'enamel-ignore' not in item %}
{% if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif %}
	keys[num_keys++] = {{ item|hashkey }};
	{% if item['type'] == 'input' %}
	persist_write_string(pkey++, s_{{ item|getid|cvarname }});
	{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
	{% if item['options'][0]['value'] is string %}
	persist_write_int(pkey++, s_{{ item|getid|cvarname }});
	{% else %}
	persist_write_int(pkey++, s_{{ item|getid|cvarname }});
	{% endif %}
	{% elif item['type'] == 'toggle' %}
	persist_write_bool(pkey++, s_{{ item|getid|cvarname }});
	{% elif item['type'] == 'color' %}
	persist_write_int(pkey++, s_{{ item|getid|cvarname }}.argb);
	{% elif item['type'] == 'slider' %}
	persist_write_int(pkey++, s_{{ item|getid|cvarname }});
	{% elif item['type'] == 'checkboxgroup' %}
	persist_write_data(pkey++, s_{{ item|getid|cvarname }}, {{ item['options']|length }});
	{% else %}
	num_keys--;
	{% endif %}
{% if 'capabilities' in item %}
#endif
{% endif %}
{% endif %}
{% endmacro -%}

{% macro item_free(item) %}
{% if 'messageKey' in item and 'enamel-ignore' not in item %}
{% if 'capabilities' in item %}
#if {{ item['capabilities']|getdefines }}
{% endif %}
	{% if item['type'] == 'input' %}
	if(s_{{ item|getid|cvarname }}) free(s_{{ item|getid|cvarname }});
	{% endif %}
{% if 'capabilities' in item %}
#endif
{% endif %}
{% endif %}
{% endmacro -%}

void enamel_deinit(){
	if(s_config_changed){
	uint32_t pkey = ENAMEL_VALUE_PKEY;
	uint16_t num_keys = 0;
	uint32_t keys[{{ config|settingscount }}];
	
{% for item in config %}
{% if item['type'] == 'section' %}
{% for item in item['items'] %}
{{ item_deinit(item) }}
{%- endfor %}
{% else %}
{{ item_deinit(item) }}
{%- endif %}
{% endfor %}

	persist_write_int(ENAMEL_PKEY, num_keys);
	prv_save_generic_data(ENAMEL_PKEY + 1, keys, num_keys * sizeof(uint32_t));
	}

{% for item in config %}
{% if item['type'] == 'section' %}
{% for item in item['items'] %}
{{ item_free(item) }}
{%- endfor %}
{% else %}
{{ item_free(item) }}
{%- endif %}
{% endfor %}

	s_config_changed = false;
	events_app_message_unsubscribe(s_event_handle);
	s_settings_received_callback = NULL;
}

void enamel_register_settings_received(EnamelSettingsReceivedCallback *callback){
	s_settings_received_callback = callback;
}

